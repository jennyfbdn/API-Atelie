package br.itb.projeto.pizzaria3e.rest.controller;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import jakarta.servlet.http.HttpServletRequest;

import br.itb.projeto.pizzaria3e.model.entity.Produto;
import br.itb.projeto.pizzaria3e.model.entity.Usuario;
import br.itb.projeto.pizzaria3e.rest.exception.ResourceNotFoundException;
import br.itb.projeto.pizzaria3e.rest.response.MessageResponse;
import br.itb.projeto.pizzaria3e.service.ProdutoService;

@RestController
@RequestMapping("/produto")
@CrossOrigin(origins = 	"*")
public class ProdutoController {

	private ProdutoService produtoService;
	//Source -> Generate Constructor using Fields...
	
	public ProdutoController(ProdutoService produtoService) {
		super();
		this.produtoService = produtoService;
	}
	
	@GetMapping("/test")
	public String getTest() {
		return "Olá, Produto!";
	}
	
	@GetMapping("/findById/{id}")
	public ResponseEntity<Produto> findById(@PathVariable long id){
		
		Produto produto = produtoService.findById(id);
		
		if(produto != null) {
			return new ResponseEntity<Produto>(produto, HttpStatus.OK);
		} else {
			throw new ResourceNotFoundException("Produto não encontrado!");
		}
	}
	
	@GetMapping("/findAll")
	public ResponseEntity<List<Produto>> findAll(){
		
		List<Produto> produtos = produtoService.findAll();
		
		return new ResponseEntity<List<Produto>>(produtos, HttpStatus.OK);
	}
	
	@GetMapping("/findByTipo/{tipo}")
	public ResponseEntity<List<Produto>> findByTipo(@PathVariable String tipo){
		
		List<Produto> produtos = produtoService.findByTipo(tipo);
		
		return new ResponseEntity<List<Produto>>(produtos, HttpStatus.OK);
	}
	
	@GetMapping("/findByCategoria/{categoriaId}")
	public ResponseEntity<List<Produto>> findByCategoria(@PathVariable long categoriaId){
		
		List<Produto> produtos = produtoService.findByCategoria(categoriaId);
		
		return new ResponseEntity<List<Produto>>(produtos, HttpStatus.OK);
	}
	
	@PostMapping("/create")
	public ResponseEntity<?> create(@RequestBody Produto produto) {
		Produto _produto = produtoService.save(produto);
		
		if(_produto != null) {
			return ResponseEntity.ok().body("Produto cadastrado com sucesso!");
		}
		
		throw new ResourceNotFoundException("Erro ao cadastrar produto!");
	}
	
	@PostMapping("/criar")
	public ResponseEntity<?> criar(@RequestBody Produto produto) {
		Produto _produto = produtoService.save(produto);
		
		if(_produto != null) {
			return ResponseEntity.ok().body("Produto cadastrado com sucesso!");
		}
		
		throw new ResourceNotFoundException("Erro ao cadastrar produto!");
	}
	
	@PostMapping("/upload")
	public ResponseEntity<?> upload(
			@RequestParam(required = false) MultipartFile file,
			@RequestParam String nome,
			@RequestParam String tipo,
			@RequestParam String descricao,
			@RequestParam String codigoBarras,
			@RequestParam String preco) {

		Produto produto = new Produto();
		produto.setNome(nome);
		produto.setTipo(tipo);
		produto.setDescricao(descricao);
		produto.setCodigoBarras(codigoBarras);
		try {
			produto.setPreco(Double.parseDouble(preco));
		} catch (Exception e) {
			produto.setPreco(0.0);
		}

		produtoService.createComFoto(file, produto);
		return ResponseEntity.ok("Produto criado!");
	}
	
	@PostMapping("/createComFoto")
	public ResponseEntity<?> createComFoto(
			@RequestParam(required = false) MultipartFile file,
			@RequestParam String nome,
			@RequestParam String tipo,
			@RequestParam String descricao,
			@RequestParam String codigoBarras,
			@RequestParam String preco,
			@RequestParam(required = false) String categoriaId) {

		Produto produto = new Produto();
		produto.setNome(nome);
		produto.setTipo(tipo);
		produto.setDescricao(descricao);
		produto.setCodigoBarras(codigoBarras);
		try {
			produto.setPreco(Double.parseDouble(preco));
		} catch (Exception e) {
			produto.setPreco(0.0);
		}

		Produto _produto = produtoService.createComFoto(file, produto);
		
		if(_produto != null) {
			return ResponseEntity.ok().body("Produto cadastrado com sucesso!");
		}
		
		throw new ResourceNotFoundException("Erro ao cadastrar produto!");
	}
	
	@PutMapping("/alterar/{id}")
	public ResponseEntity<?> alterar(@PathVariable long id, @RequestBody Produto produto) {
		Produto _produto = produtoService.update(id, produto);
		
		if(_produto != null) {
			return ResponseEntity.ok().body("Produto atualizado com sucesso!");
		}
		
		throw new ResourceNotFoundException("Erro ao atualizar produto!");
	}
	
	@PostMapping("/update/{id}")
	public ResponseEntity<?> update(
			@PathVariable long id,
			@RequestParam(required = false) MultipartFile file,
			@RequestParam String nome,
			@RequestParam String tipo,
			@RequestParam String descricao,
			@RequestParam String codigoBarras,
			@RequestParam String preco) {

		Produto produto = new Produto();
		produto.setNome(nome);
		produto.setTipo(tipo);
		produto.setDescricao(descricao);
		produto.setCodigoBarras(codigoBarras);
		try {
			produto.setPreco(Double.parseDouble(preco));
		} catch (Exception e) {
			produto.setPreco(0.0);
		}

		produtoService.updateComFoto(id, file, produto);
		return ResponseEntity.ok("Produto atualizado!");
	}
	
	@PutMapping("/editar/{id}")
	public ResponseEntity<?> editar(@PathVariable long id, @RequestBody Produto produto) {
		Produto _produto = produtoService.update(id, produto);
		
		if(_produto != null) {
			return ResponseEntity.ok().body("Produto atualizado com sucesso!");
		}
		
		throw new ResourceNotFoundException("Erro ao atualizar produto!");
	}
	
	@PutMapping("/inativar/{id}")
	public ResponseEntity<?> inativar(@PathVariable long id) {
		
		Produto _produto = produtoService.inativar(id);
		
		if(_produto != null) {
			return ResponseEntity.ok().body("Produto inativada com sucesso!");
		}
		
		throw new ResourceNotFoundException("Erro ao inativar o produto!");
	}
}
