package br.itb.projeto.pizzaria3e.rest.controller;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.itb.projeto.pizzaria3e.model.entity.Notificacao;
import br.itb.projeto.pizzaria3e.rest.exception.ResourceNotFoundException;
import br.itb.projeto.pizzaria3e.service.NotificacaoService;

@RestController
@RequestMapping("/notificacao")
public class NotificacaoController {

    private NotificacaoService notificacaoService;

    public NotificacaoController(NotificacaoService notificacaoService) {
        super();
        this.notificacaoService = notificacaoService;
    }

    @GetMapping("/test")
    public String getTest() {
        return "Olá, Notificação!";
    }

    @GetMapping("/findById/{id}")
    public ResponseEntity<Notificacao> findById(@PathVariable long id) {
        Notificacao notificacao = notificacaoService.findById(id);
        
        if (notificacao != null) {
            return new ResponseEntity<Notificacao>(notificacao, HttpStatus.OK);
        } else {
            throw new ResourceNotFoundException("Notificação não encontrada!");
        }
    }

    @GetMapping("/findAll")
    public ResponseEntity<List<Notificacao>> findAll() {
        List<Notificacao> notificacoes = notificacaoService.findAll();
        return new ResponseEntity<List<Notificacao>>(notificacoes, HttpStatus.OK);
    }

    @GetMapping("/usuario/{usuarioId}")
    public ResponseEntity<List<Notificacao>> findByUsuarioId(@PathVariable long usuarioId) {
        List<Notificacao> notificacoes = notificacaoService.findByUsuarioId(usuarioId);
        return new ResponseEntity<List<Notificacao>>(notificacoes, HttpStatus.OK);
    }

    @GetMapping("/usuario/{usuarioId}/nao-lidas")
    public ResponseEntity<List<Notificacao>> findNaoLidasByUsuarioId(@PathVariable long usuarioId) {
        List<Notificacao> notificacoes = notificacaoService.findNaoLidasByUsuarioId(usuarioId);
        return new ResponseEntity<List<Notificacao>>(notificacoes, HttpStatus.OK);
    }

    @GetMapping("/usuario/{usuarioId}/count-nao-lidas")
    public ResponseEntity<Long> countNaoLidasByUsuarioId(@PathVariable long usuarioId) {
        long count = notificacaoService.countNaoLidasByUsuarioId(usuarioId);
        return new ResponseEntity<Long>(count, HttpStatus.OK);
    }

    @PostMapping("/create")
    public ResponseEntity<?> create(@RequestBody Notificacao notificacao) {
        System.out.println("=== NOVA NOTIFICAÇÃO ===");
        System.out.println("Usuario ID: " + notificacao.getUsuarioId());
        System.out.println("Titulo: " + notificacao.getTitulo());
        System.out.println("Mensagem: " + notificacao.getMensagem());
        System.out.println("Tipo: " + notificacao.getTipo());
        
        Notificacao _notificacao = notificacaoService.save(notificacao);
        
        if (_notificacao != null) {
            return ResponseEntity.ok().body("Notificação criada com sucesso!");
        }
        
        return ResponseEntity.badRequest().body("Erro ao criar notificação");
    }

    @PutMapping("/{id}/lida")
    public ResponseEntity<?> marcarComoLida(@PathVariable long id) {
        Notificacao notificacao = notificacaoService.marcarComoLida(id);
        
        if (notificacao != null) {
            return ResponseEntity.ok().body("Notificação marcada como lida!");
        } else {
            throw new ResourceNotFoundException("Notificação não encontrada!");
        }
    }

    @PostMapping("/enviar")
    public ResponseEntity<?> enviarNotificacao(@RequestBody NotificacaoRequest request) {
        Notificacao notificacao = notificacaoService.criarNotificacao(
            request.getUsuarioId(),
            request.getTitulo(),
            request.getMensagem(),
            request.getTipo(),
            request.getReferenciaId()
        );
        
        if (notificacao != null) {
            return ResponseEntity.ok().body("Notificação enviada com sucesso!");
        }
        
        return ResponseEntity.badRequest().body("Erro ao enviar notificação");
    }

    // Classe auxiliar para receber dados da requisição
    public static class NotificacaoRequest {
        private long usuarioId;
        private String titulo;
        private String mensagem;
        private String tipo;
        private Long referenciaId;

        public long getUsuarioId() {
            return usuarioId;
        }

        public void setUsuarioId(long usuarioId) {
            this.usuarioId = usuarioId;
        }

        public String getTitulo() {
            return titulo;
        }

        public void setTitulo(String titulo) {
            this.titulo = titulo;
        }

        public String getMensagem() {
            return mensagem;
        }

        public void setMensagem(String mensagem) {
            this.mensagem = mensagem;
        }

        public String getTipo() {
            return tipo;
        }

        public void setTipo(String tipo) {
            this.tipo = tipo;
        }

        public Long getReferenciaId() {
            return referenciaId;
        }

        public void setReferenciaId(Long referenciaId) {
            this.referenciaId = referenciaId;
        }
    }
}