package br.itb.projeto.pizzaria3e.rest.controller;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.zip.DeflaterOutputStream;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import br.itb.projeto.pizzaria3e.model.entity.Produto;
import br.itb.projeto.pizzaria3e.service.ProdutoService;
import jakarta.servlet.http.HttpServletRequest;

@RestController
@RequestMapping("/api")
@CrossOrigin(origins = "*")
public class FileUploadController {

    private final ProdutoService produtoService;

    public FileUploadController(ProdutoService produtoService) {
        this.produtoService = produtoService;
    }

    @PostMapping("/**")
    public ResponseEntity<?> handleAnyRequest(HttpServletRequest request) throws IOException {
        String path = request.getRequestURI();

        if (path.contains("/produto-create")) {
            return createProduto(request);
        } else if (path.contains("/produto-update")) {
            String[] parts = path.split("/");
            long id = Long.parseLong(parts[parts.length - 1]);
            return updateProduto(request, id);
        }

        return ResponseEntity.ok("Endpoint n√£o encontrado");
    }

    private ResponseEntity<?> createProduto(HttpServletRequest request) throws IOException {
        if (request instanceof MultipartHttpServletRequest) {
            MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;

            MultipartFile file = multipartRequest.getFile("file");
            Produto produto = criarProdutoDoRequest(multipartRequest);

            if (file != null && !file.isEmpty()) {
                produto.setFoto(comprimirBytes(file.getBytes()));
            }

            produtoService.createComFoto(file, produto);
            return ResponseEntity.ok("Produto criado com sucesso!");
        }

        return ResponseEntity.badRequest().body("Erro no upload");
    }

    private ResponseEntity<?> updateProduto(HttpServletRequest request, long id) throws IOException {
        if (request instanceof MultipartHttpServletRequest) {
            MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;

            MultipartFile file = multipartRequest.getFile("file");
            Produto produto = criarProdutoDoRequest(multipartRequest);

            if (file != null && !file.isEmpty()) {
                produto.setFoto(comprimirBytes(file.getBytes()));
            }

            produtoService.updateComFoto(id, file, produto);
            return ResponseEntity.ok("Produto atualizado com sucesso!");
        }

        return ResponseEntity.badRequest().body("Erro no update");
    }

    private Produto criarProdutoDoRequest(MultipartHttpServletRequest request) {
        Produto produto = new Produto();
        produto.setNome(request.getParameter("nome"));
        produto.setTipo(request.getParameter("tipo"));
        produto.setDescricao(request.getParameter("descricao"));
        produto.setCodigoBarras(request.getParameter("codigoBarras"));
        try {
            produto.setPreco(Double.parseDouble(request.getParameter("preco")));
        } catch (Exception e) {
            produto.setPreco(0.0);
        }
        return produto;
    }

    private byte[] comprimirBytes(byte[] data) throws IOException {
        ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
        try (DeflaterOutputStream deflaterStream = new DeflaterOutputStream(byteStream)) {
            deflaterStream.write(data);
        }
        return byteStream.toByteArray();
    }
}
